[
  {
    "objectID": "index.de.html",
    "href": "index.de.html",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "",
    "text": "Einleitung\nDieses Buch wird dir das Programmieren beibringen. Hoffentlich auf eine lustige Art und Weise, denn wenn es etwas Befriedigenderes gibt als ein Videospiel zu spielen, dann ist es eines zu erstellen. Obwohl es für den Kurs “Python für soziale und experimentelle Psychologie” geschrieben wurde, ist mein Hauptziel nicht, dir Python beizubringen. Python ist ein fantastisches Werkzeug (mehr dazu später), aber es ist nur eine von vielen existierenden Programmiersprachen. Mein letztendliches Ziel ist es, dir allgemeine Programmierfähigkeiten zu vermitteln, die nicht von einer bestimmten Programmiersprache abhängen, und sicherzustellen, dass du gute Gewohnheiten entwickelt, die deinen Code klar, leicht lesbar und leicht wartbar machen. Letzteres ist entscheidend. Programmieren ist nicht nur darüber, Code zu schreiben, der funktioniert. Das muss zwar stimmen, aber es ist nur die Mindestanforderung. Programmieren geht darum, einen klaren und leicht lesbaren Code zu schreiben, den andere und, noch wichtiger, du-zwei-Wochen-später verstehen können.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#ziel-des-buches",
    "href": "index.de.html#ziel-des-buches",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Ziel des Buches",
    "text": "Ziel des Buches\nDas Ziel ist, dass du lernst, ein komplexes Experiment zu programmieren, das mehrere Blöcke und Durchläufe, verschiedene Bedingungen, komplizierte visuelle Präsentation, automatische Datenerfassung und Ausnahmenbehandlung hat. Klingt das ambitioniert? Ja, aber wir werden Schritt für Schritt vorgehen, damit du es lernst.\n\nKernkonzepte von Python, die du lernen solltest:\n\nVariablen und Konstanten\nUnveränderliche Datentypen wie Ganzzahlen, Fließkommazahlen, Strings, logische Werte und Tupel\nVeränderliche Typen wie Listen und Dictionaries\nFunktionen\nSteuerstrukturen wie bedingte if-else-Anweisungen und Schleifen\nObjektorientierte Programmierung, einschließlich der Konzepte Vererbung, Duck-Typing und Mixing\nAusnahmen\nDateioperationen\n\nPsychoPy: Das ist kein Kern-Python, aber es ist eine wichtige Bibliothek für psychophysikalische Experimente und du wirst wichtige Werkzeuge lernen, die du benötigst, um ein Experiment zu programmieren.\nGuter Programmierstil, der du beachten solltest:\n\nSchreibe klaren Code in iterativer Weise\nLies (deinen eigenen) Code\nDokumentiere deinen Code\nDebugge dein Programm in VS Code\n\n\nIch habe versucht, Konzepte im Kontext darzustellen, in dem sie benötigt werden, um sie am besten zu erklären und ihre typischen Anwendungsfälle zu präsentieren. Das bedeutet, dass das Material verteilt ist und nach Bedarf präsentiert wird. Zum Beispiel wird der Begriff von Listen zuerst präsentiert, aber Operationen an ihnen werden in späteren Kapiteln präsentiert, sowohl weil wir dies später benötigen als auch um dein Gefühl der Überforderung in Grenzen zu halten. Dies macht dieses Buch schwieriger als eine Referenz zu nutzen (es gibt hervorragende Referenzen wie die offizielle Python-Dokumentation), aber die Hoffnung ist, dass dir durch die Vergabe von kleinen Informationsbrocken das Verständnis des Materials und die Integration mit dem, was du bereits weißt, erleichtert wird.\nGleiche “verteilte” Logik gilt auch für Übungen. Statt am Ende jedes Kapitels aufgeführt zu sein, sind sie in den Text eingebettet und du solltest sie zu diesem Zeitpunkt durchführen. Viele von ihnen sind so gestaltet, dass sie Konzepte klären, die zuvor präsentiert wurden, indem sie illustrative Beispiele verwenden, also wäre es am hilfreichsten, sie sofort durchzuführen. Dasselbe gilt für das Schreibtraining, obwohl du in diesem Fall das gesamte Material lesen kannst, um einen “Vogelblick” auf das gesamte Programm zu erhalten, und dann den Text erneut lesen und das Schreibtraining durchführen kannst.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#voraussetzungen",
    "href": "index.de.html#voraussetzungen",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Voraussetzungen",
    "text": "Voraussetzungen\nDieses Material setzt keine Vorwissen in Python oder Programmierung voraus. Es soll dir helfen, dein Wissen schrittweise aufzubauen und immer komplexere Spiele zu erstellen.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#warum-spiele",
    "href": "index.de.html#warum-spiele",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Warum Spiele?",
    "text": "Warum Spiele?\nDer eigentliche Zweck dieses Kurses ist es, Psychologie- und Sozialwissenschafts-Studenten beizubringen, wie man Experimente programmiert. Das ist es, worum es in der echten Forschung geht. Allerdings gibt es kaum einen praktischen Unterschied zwischen den beiden. Die grundlegenden Zutaten sind dieselben und, argumentieren wir mal, Experimente sind einfach langweilige Spiele. Und, keine Sorge, wenn du ein Spiel programmieren kannst, kannst du auf jeden Fall auch ein Experiment programmieren.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#warum-sollte-ein-psychologe-programmieren-lernen",
    "href": "index.de.html#warum-sollte-ein-psychologe-programmieren-lernen",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Warum sollte ein Psychologe programmieren lernen?",
    "text": "Warum sollte ein Psychologe programmieren lernen?\nWarum sollte ein Psychologe, der sich für Menschen interessiert, lernen, wie man Computer programmiert? Die offensichtlichste Antwort ist, dass das eine nützliche Fähigkeit ist. Wenn du programmieren kannst, hast du die Freiheit, ein Experiment zu erstellen, das deine Forschungsfrage beantwortet, und nicht ein Experiment, das aufgrund der Einschränkungen deiner Software umsetzbar ist.\nWichtiger ist, zumindest aus meiner Sicht, dass das Programmieren die Art und Weise verändert, wie du denkst. Menschen sind clever, aber Computer sind dumm1. Wenn du dein Experiment oder deine Reisepläne jemandem erklärst, kannst du recht vage sein, einen kleinen Fehler machen oder bestimmte Teile auslassen. Menschen sind clever, also werden sie die fehlenden Informationen mit ihrem Wissen ausfüllen, einen Fehler erkennen und korrigieren, nach mehr Informationen fragen und auf eigene Faust improvisieren, wenn sie auf etwas stoßen, das du nicht abgedeckt hast. Computer sind dumm, also musst du präzise sein, du kannst keine Graubereiche haben, nichts dem “es wird sich schon ergeben, wenn es passiert” überlassen (das wird es nicht). Meine persönliche Erfahrung, gestützt durch Psychologen, die programmieren gelernt haben, ist, dass es dir bewusst macht, wie vage und ungenau Menschen sein können, ohne es zu merken (und ohne dass du es bemerkst). Programmieren zwingt dich, präzise und gründlich zu sein, im Voraus für jede Eventualität zu planen. Und das ist an sich eine sehr nützliche Fähigkeit, die auf jede Aktivität angewendet werden kann, die Planung erfordert, ob es sich nun um ein Experimentaldesign oder Reisevorbereitungen handelt.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#warum-python",
    "href": "index.de.html#warum-python",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Warum Python?",
    "text": "Warum Python?\nEs gibt viele Möglichkeiten, ein Experiment für psychologische Forschung zu erstellen. Du kannst Drag-and-Drop-Systeme verwenden, entweder kommerziell wie Presentation, Experiment Builder oder kostenlos wie PsychoPy Builder-Interface. Sie haben eine viel flachere Lernkurve, sodass du schneller mit dem Erstellen und Ausführen deiner Experimente beginnen kannst. Allerdings hat ihre Einfachheit einen Preis: Sie sind relativ begrenzt darin, welche Reize du verwenden und wie du das Präsentationsschema, Bedingungen, Feedback usw. steuern kannst. Normalerweise kannst du sie durch Programmieren des gewünschten Verhaltens erweitern, aber dafür musst du programmieren können (wenn du Python kennst, beschleunigst du deine PsychoPy-Experimente). Daher denke ich, dass diese Systeme, insbesondere PsychoPy, großartige Werkzeuge sind, um schnell ein einfaches Experiment zusammenzustellen, aber sie sind am nützlichsten, wenn du verstehst, wie sie den darunterliegenden Code erstellen und wie du es selbst programmieren würdest. Dann bist du nicht durch die Software beschränkt, da du weißt, dass du etwas programmieren kannst, das der Standard-Drag-and-Drop nicht erlaubt. Gleichzeitig kannst du immer auf Drag-and-Drop zurückgreifen, wenn es ausreichend schnell ist, oder eine Mischung aus beiden Ansätzen verwenden. Letztendlich geht es darum, Optionen und kreativen Freiheit zu haben, um ein Experiment zu programmieren, das deine Forschungsfrage beantwortet, nicht ein Experiment, das deine Software dir erlaubt zu programmieren.\nWir werden Programmieren in Python lernen, das ist eine super Sprache, die einfache und klare Syntax mit Power und Fähigkeit verbindet, fast jedes Problem zu lösen. In diesem Seminar werden wir uns auf Desktop-Experimente konzentrieren, aber du kannst es auch für Online-Experimente (oTree und PsychoPy), wissenschaftliches Programmieren (NumPy und SciPy), Datenanalyse (pandas), Machine Learning (scikit-learn), Deep Learning (keras), Web-Programmierung (django), Computer Vision (OpenCV) usw. verwenden. Also ist Python eines der vielseitigsten Programmierwerkzeuge, das du für alle Phasen deiner Forschung oder Arbeit verwenden kannst. Und, Python ist kostenlos, also musst du dir keine Sorgen machen, ob du oder dein zukünftiger Arbeitgeber sich Lizenzgebühren leisten können (ein sehr reales Problem, wenn du Matlab verwendest).",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#seminar-spezifische-informationen",
    "href": "index.de.html#seminar-spezifische-informationen",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Seminar-spezifische Informationen",
    "text": "Seminar-spezifische Informationen\nDies ist ein Material für den Python für Sozial- und Experimentelle Psychologie-Seminar, den ich an der Universität Bamberg halte. Jedes Kapitel behandelt ein einzelnes Spiel, stellt die notwendigen Ideen vor und wird von Übungen begleitet, die du ausführen und einreichen musst. Um das Seminar zu bestehen, musst du alle Aufgaben erfüllen, d.h. alle Spiele schreiben. Du musst nicht alle Übungen ausführen oder korrekte Lösungen liefern, um das Seminar zu bestehen. Informationen darüber, wie die Punkte für Übungen in eine tatsächliche Note (wenn du eine benötigst) oder ein “bestanden” umgewandelt werden, werden während des Seminars zur Verfügung gestellt.\nDas Material ist so strukturiert, dass jeder Kapitel oder Abschnitt einem einzelnen Treffen entspricht. Aber wir sind alle unterschiedlich, also arbeite in deinem eigenen Tempo, lies das Material und reiche die Aufgaben unabhängig ein. Ich werde detailliertes Feedback für jede Aufgabe geben und du hast die Möglichkeit, Probleme anzugehen und erneut einzureichen, ohne Punkte zu verlieren. Bitte beachte, dass mein Feedback nicht nur die tatsächlichen Probleme mit dem Code, sondern auch die Art und Weise, wie du die Lösung umgesetzt hast und wie sauber und gut dokumentiert dein Code ist, abdeckt. Denk dran, unsere Aufgabe ist es nicht nur, wie man ein funktionierendes Spiel programmiert, sondern wie man einen schönen, klaren, leicht lesbaren und wartbaren Code schreibt.2\nSehr wichtig: Zögere nicht, Fragen zu stellen. Wenn ich denke, dass du wichtige Informationen im Material verpasst hast, werde ich dich auf die genaue Stelle hinweisen. Wenn du verwirrt bist, werde ich dich mit Fragen anstupsen, damit du dein eigenes Problem löst. Wenn du mehr Informationen benötigst, werde ich sie dir zur Verfügung stellen. Wenn du einfach mehr wissen möchtest, frag mich und ich werde dir erklären, warum Dinge so sind, wie sie sind, oder Vorschläge für das Lesen geben. Wenn ich denke, dass du das Problem ohne meine Hilfe lösen solltest, werde ich es dir sagen (obwohl ich wahrscheinlich immer noch ein paar hinweisende Fragen stellen würde).",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#über-das-material",
    "href": "index.de.html#über-das-material",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "Über das Material",
    "text": "Über das Material\nDieses Material ist kostenlos nutzbar und steht unter der Creative Commons Attribution-NonCommercial-NoDerivatives V4.0 International License.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.de.html#footnotes",
    "href": "index.de.html#footnotes",
    "title": "Lerne Python, indem du Spiele schreibst.",
    "section": "",
    "text": "Dies wurde geschrieben, bevor große Sprachmodelle auf den Plan traten, ist aber immer noch wahr, wenn es um Programmieren geht.↩︎\nGute Gewohnheiten! Forme gute Gewohnheiten! Danke fürs Lesen dieser subliminalen Nachricht.↩︎",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "00-software.de.html",
    "href": "00-software.de.html",
    "title": "Software",
    "section": "",
    "text": "PsychoPy\nWenn du Windows nutzt, lade und installiere die Standalone PsychoPy Version herunter. Nimm einfach die neueste (und beste) PsychoPy Version, die dir empfohlen wird (Stand PsychoPy 2023.2.2 mit Python 3.8) und folge den Anweisungen.\nWenn du einen Mac oder Linux verwendest, hast du die Optionen, PsychoPy über pip oder Anaconda zu installieren. Bitte folge den aktualen Anweisungen.",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "00-software.de.html#install-vs-code",
    "href": "00-software.de.html#install-vs-code",
    "title": "Software",
    "section": "VS Code",
    "text": "VS Code\nVisual Studio Code ist ein kostenloser, leichter und offener Quellcode-Editor mit starker Unterstützung für Python. Lade den Installer für deine Plattform herunter und folge den Anweisungen.\nNächster Schritt: Folge dem Tutorial Erste Schritte mit Python in VS Code. Wenn du Windows und die standalone PsychoPy-Installation verwendest, überspringe den Abschnitt Installiere einen Python-Interpreter, da du bereits eine Python-Installation mit PsychoPy hast. Dies ist der Interpreter, den du im Abschnitt Wähle einen Python-Interpreter verwenden solltest. In meinem Fall ist der Pfad C:\\Program Files\\PsychoPy3\\python.exe.\nInstalliere und aktiviere einen Linter, eine Software, die syntaktische und stilistische Probleme in deinem Python-Quellcode hervorhebt. Folge der Anleitung auf der VS Code-Website.",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "00-software.de.html#jupyter-notebooks",
    "href": "00-software.de.html#jupyter-notebooks",
    "title": "Software",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\nJupyter Notebooks bieten eine super bequeme Möglichkeit, Text, Abbildungen und Code in einem einzigen Dokument zu vermischen. Sie erleichtern es auch, verschiedene kleine Snippets parallel auszuprobieren, ohne Skripte auszuführen. Wir werden sie für unser erstes Kapitel und gelegentliche Übungen oder Code-Tests später verwenden. Du kannst sie auf zwei Arten nutzen: 1) in VS Code unter Verwendung der Jupyter-Erweiterung, 2) im Browser unter Verwendung der klassischen Schnittstelle.\n\nJupyter Notebooks in VS Code\nLies die Anleitung darüber, wie du das Jupyter-Paket installierst und Notebooks in VS Code verwendest.\n\n\nJupyter Notebooks in Anaconda\nDie einfachste Möglichkeit, Jupyter Notebooks zusammen mit vielen anderen nützlichen Datenwissenschaft-Tools zu verwenden, ist das Anaconda-Toolkit. Beachte jedoch, dass dies eine zweite Python-Verteilung auf deinem System einführt. Dies kann zu Verwirrung führen, wenn du mit Skripten in VS Code arbeitest, wenn zufällig der Anaconda-Interpreter aktiv ist, anstatt der PsychoPy-Interpreter. Keine Panik, folge den Anweisungen unter Wähle einen Python-Interpreter und stelle sicher, dass der PsychoPy-Interpreter aktiv ist.\nOkay, dann lade und installiere Anaconda herunter. Die Website hat einen super Einstieg Abschnitt.",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "00-software.de.html#files-folder",
    "href": "00-software.de.html#files-folder",
    "title": "Software",
    "section": "Mach’s sauber",
    "text": "Mach’s sauber\nBevor wir loslegen, schlage ich vor, dass du einen Ordner namens games-with-python (oder so ähnlich) erstellst. Wenn du Jupyter Notebooks über Anaconda verwendest, solltest du ihn in deinem Benutzerordner erstellen, da Anaconda ihn dort erwartet. Dann erstellst du für jedes Kapitel / Spiel einen neuen Unterordner. Für das Seminar musst du einen Ordner mit allen Dateien zippen und hochladen.",
    "crumbs": [
      "Software"
    ]
  },
  {
    "objectID": "00-software.de.html#footnotes",
    "href": "00-software.de.html#footnotes",
    "title": "Software",
    "section": "",
    "text": "Wenn du Teil des Seminars bist, frag mich einfach, wenn du Probleme hast oder unsicher bist, wie du fortfahren sollst.↩︎",
    "crumbs": [
      "Software"
    ]
  }
]