# Tipps und Tricks fürs Programmieren {- #tipps-und-tricks}

Bevor du mit dem Schreiben deines ersten Codes beginnst, müssen wir über die Kunst des Programmierens sprechen. Wie ich bereits erwähnt habe, geht es nicht darum, dass der Code funktioniert, sondern darum, dass er leicht zu verstehen ist. Ein korrekt funktionierender Code ist schön und gut, aber wenn ich zwischen einem unleserlichen Code, der momentan korrekt funktioniert, und einem klar geschriebenen und dokumentierten Code, der repariert werden muss, wählen müsste, würde ich mich jederzeit für den letzteren entscheiden. Ich kann Dinge reparieren, die ich verstehe, aber ich kann nur hoffen, wenn ich es nicht tue.

Hier sind einige Tipps zum Schreiben und Lesen von Code. Einige davon mögen zunächst kryptisch klingen (sie werden klarer, sobald wir das notwendige Material behandelt haben). Einige mögen übertrieben für einfache Projekte erscheinen, die wir umsetzen werden. Ich schlage vor, dass du diesen Abschnitt beim ersten Mal locker durchliest, aber häufig darauf zurückkommst, sobald wir richtig mit dem Programmieren beginnen. Leider funktionieren diese Tricks nicht, wenn du sie nicht anwendest! Also solltest du _immer_ darauf achten und sie zu deinen _guten Gewohnheiten_ machen, wie das Anschnallen. Der Gurt tut an den meisten (hoffentlich allen) Tagen nichts Nützliches, aber du trägst ihn, weil er plötzlich und sehr dringend extrem nützlich werden könnte und du kannst nie sicher sein, wann das passieren wird. Gleiches gilt für das Programmieren. Oft wirst du versucht sein, "schnell-n-dreckig" Code zu schreiben, weil es "nur" ein "einfacher Test", eine temporäre Lösung, ein Prototyp, ein Pilotversuch usw. ist. Aber wie man so schön sagt: "Es gibt nichts Dauerhafteres als eine temporäre Lösung". Meistens wirst du feststellen, dass dein Spielzeug-Code zu einem vollwertigen Experiment herangewachsen ist und ein Chaos ist. Oder du möchtest zu dem Pilotversuch zurückkehren, den du vor ein paar Monaten durchgeführt hast, aber stellst fest, dass es einfacher ist, von vorne zu beginnen, als zu verstehen, wie dieses Monster funktioniert^[Ist mir öfter passiert, als ich zugeben möchte.]. Also widerstehe der Versuchung! Entwickle gute Gewohnheiten und dein zukünftiges Ich wird dir sehr dankbar sein!

## Schreib den Code {#schreibtipps}

### Nutze einen Linter
Ein Linter ist ein Programm, das deinen Code-Stil analysiert und alle Probleme hervorhebt, die er findet: Leerzeichen, wo keine sein sollten, keine Leerzeichen, wo welche sein sollten, falsche Namen, zu lange Zeilen usw. Das beeinflusst nicht, wie der Code ausgeführt wird, aber wenn du auf die Ratschläge des Linters hörst, ergibt sich ein konsistenter Standard, auch wenn er langweilig aussieht. ["Langweilig ist gut!", siehe den Film "The Hitman's Bodyguard".] Versuche, alle Probleme zu beheben, die der Linter aufdeckt. Aber verwende deinen eigenen Verstand, denn manchmal sind Zeilen länger als der Linter es bevorzugt, aber dafür besser lesbar als zwei kürzere. Und ein "schlechter" Variablenname nach Linter-Standards kann für einen Psychologen ein bedeutungsvoller Name sein. Denk dran, dein Code ist für Menschen, nicht für den Linter.

### Dokumentiere deinen Code
Jedes Mal, wenn du eine neue Datei erstellst: dokumentiere sie und aktualisiere die Dokumentation, wenn du neue Funktionen oder Klassen hinzufügst/änderst/löschst. Jedes Mal, wenn du eine neue Funktion erstellst: dokumentiere sie. Neue Klasse: dokumentiere sie. Neue Konstante: es sei denn, sie ist allein aus dem Namen klar, dokumentiere sie. Du wirst eine [NumPy](https://numpydoc.readthedocs.io/en/latest/format.html)-Art, dies zu tun, im Buch lernen.

Ich kann gar nicht genug betonen, wie wichtig es ist, deinen Code zu dokumentieren. VS Code (ein Editor, den wir verwenden werden) ist clever genug, um NumPy-Dokstrings zu analysieren, also wird es dir immer dann diese Hilfe anzeigen, wenn du deine eigenen Funktionen verwendest (hilft dir, dir zu helfen!). Aber viel wichtiger ist, dass das Schreiben von Dokumentation dazu zwingt, nachzudenken und zu formulieren (in Menschensprache!), was die Funktion oder Klasse tut, welche Art die Argumente / Attribute / Methoden sind, welchen Bereich von gültigen Werten es gibt, welche Standardwerte es gibt, was eine Funktion zurückgeben sollte, usw. Meistens wirst du feststellen, dass du wichtige Details übersehen hast, die aus dem Code selbst nicht offensichtlich sind.

### Luft rein machen
Trenne Code-Blöcke mit einigen leeren Zeilen. Stell dir vor, es sind Absätze im normalen Text. Du willst doch nicht, dass dein Buch ein einziger Absatz-Albtraum wird? Setze vor jedem Block einen Kommentar, der erklärt, _was_ er tut, aber nicht _wie_ er es tut. Zum Beispiel gibt es in unserem typischen PsychoPy-basierten Spiel einen Punkt, an dem wir alle Stimuli zeichnen und das Fenster aktualisieren. Das ist ein netter, in sich geschlossener Block, der als `# alle Stimuli zeichnen` beschrieben werden kann. Der Code liefert Details darüber, was genau gezeichnet wird, in welcher Reihenfolge gezeichnet wird, usw. Aber dieser einzelne Kommentar hilft dir zu verstehen, worum es in diesem Block geht und ob er für dich im Moment relevant ist. Gleiches gilt für `# Tastendruck verarbeiten` oder `# Spielende Bedingungen überprüfen`, usw. Aber sei vorsichtig und stelle sicher, dass der Kommentar den Code korrekt beschreibt. Zum Beispiel sollte, wenn der Kommentar `# alle Stimuli zeichnen` sagt, nirgendwo Stimuli-Zeichen-Code vorhanden sein und kein Code, der etwas anderes tut!

### Schreib deinen Code einen winzigen Schritt nach dem anderen
Dein Motto sollte "langsam aber sicher" sein. So werde ich dich durch die Spiele führen. Fang immer mit etwas extrem Einfachem an, wie z.B. einem statischen Rechteck oder Bild. Stelle sicher, dass es funktioniert. Füge eine kleine Funktionalität hinzu: Ändere die Farbe, Position, füge ein weiteres Rechteck hinzu, speichere es als Attribut, usw. Stelle sicher, dass es funktioniert. Gehe nie zum nächsten Schritt über, solange du nicht genau verstehst, was dein aktueller Code tut und zu 100% sicher bist, dass er wie erwartet funktioniert. Und ich meine das ernst! Wenn du auch nur den Hauch eines Zweifels hast, überprüfe es nochmal. Sonst wird dieser Zweifel wachsen und dich allmählich unsicher über deinen Code machen. Diese Schnecken-Geschwindigkeit-Methode mag vielleicht albern und zu langsam erscheinen, aber es ist immer noch schneller, als eine große Code-Portion zu schreiben und dann zu versuchen, sie zum Laufen zu bringen. Es ist viel einfacher, einfache Probleme nacheinander zu lösen, als viele gleichzeitig.

### Es ist nichts falsch an StackOverflow
Ja, du kannst immer versuchen, eine Lösung für dein Problem auf StackOverflow zu finden^[Allerdings, wenn du das Seminar machst, frag mich erst!]. Ich mache das die ganze Zeit! Aber du solltest die bereitgestellte Lösung _nur verwenden, wenn du sie verstehst_! Kopiere und füge den Code nicht ein, der _scheint_, ein Problem wie deines zu lösen. Wenn du das tust und Glück hast, funktioniert es vielleicht. Oder, wieder wenn du Glück hast, funktioniert es nicht auf offensichtliche Weise. Aber wenn du nicht so viel Glück hast, funktioniert es (manchmal) auf subtile Weise falsch. Und da du nicht wusstest, was der Code tat, als du ihn eingefügt hast, bist du noch verwirrter. Also verwende StackOverflow als Wissensquelle, nicht als Quelle für kopierbaren Code!

## Code lesen {#lesetipps}
Code zu lesen ist einfach, weil Computer dumm sind und du schlau bist. Das bedeutet, dass die Anweisungen, die du dem Computer gibst, notwendigerweise sehr einfach sein müssen und daher sehr einfach für einen Menschen zu verstehen sind. Code zu lesen ist auch schwer, weil Computer dumm sind und du schlau bist. Du bist so schlau, dass du den entire Code nicht lesen musst, um zu verstehen, was er tut, du liest einfach die wichtigsten Teile und füllst die Lücken auf. Leider bedeutet das, dass du dazu neigst, Fehler zu überlesen. Das ist nicht einzigartig für das Programmieren, wenn du jemals einen Text korrigiert hast, weißt du, wie schwer es ist, Fehler zu finden. Dein Gehirn korrigiert sie auf der Stelle mithilfe des Kontexts und du liest das Wort so, wie es sein sollte, nicht so, wie es tatsächlich geschrieben ist^[Tipp: Lies deinen Text einen Satz nach dem anderen von hinten oder lies einen zufälligen Satz. Das unterbricht den Fluss des Textes und hilft dir, dich auf Wörter statt auf die Bedeutung und die Geschichte zu konzentrieren.].

Meine Erfahrung mit Programmieren im Allgemeinen und auf diesem Seminar im Besonderen ist, dass die meisten Probleme, mit denen du stecken bleibst, simpel sind und im Nachhinhin offensichtlich^[Hinterher ist man immer schlauer!]. Mach dir keine Sorgen! Es liegt nicht an dir, sondern einfach daran, wie wunderbar dein Gehirn für die Mustererkennung verdrahtet ist. Hier sind einige Vorschläge, die dir helfen können, das Lesen von Code robuster zu gestalten.

### Denk wie ein Computer
Lies den Code Zeile für Zeile und "führe" ihn aus, wie der Computer es tun würde. Verwende Stift und Papier, um die Variablen im Auge zu behalten. Verfolge, welche Code-Blöcke erreicht werden können und wann. Mach langsamer und stell sicher, dass du jede Zeile verstehst und in der Lage bist, die Variablen im Auge zu behalten. Sobald du das gemacht hast, wird es einfach sein, einen Fehler zu erkennen.

### Stell dir vor, du hast diesen Code noch nie gesehen
Geht davon aus, dass du keine Ahnung hast, was der Code macht. Wie ich schon schrieb, sieht man oft _buchstäblich_ einen Fehler nicht, weil das Gehirn Details einfügt und die Realität so zurechtbiegt, dass sie den eigenen Erwartungen entspricht^[Kürzlich habe ich eine halbe Stunde damit verbracht, herauszufinden, warum zwei identische Code-Blöcke unterschiedliche Ergebnisse liefern. Mein Sohn hat fast sofort einen Unterschied gefunden (ein fehlendes Komma in einem von ihnen), weil für ihn das alles nur Buchstaben und Zahlen waren.]. Du _weißt_, was dieser Code tun sollte, also liest du ihn nicht, sondern überfliegst ihn und gehst davon aus, dass er das tut, was er tun sollte, es sei denn, er sieht offensichtlich furchtbar falsch aus. Es ist schwer, Ihre Erwartungen auszuschalten, aber es hilft ungemein.

### Suche nicht nur unter der Straßenlaterne
Wann immer du einen neuen Code verwendest oder etwas implementieren musst, das sich kompliziert anfühlt, und dein Code nicht so funktioniert, wie er sollte, wirst du dazu neigen, anzunehmen, dass ein Problem mit dem neuen, ausgefallenen Code vorliegt. Einfach weil er neu, ausgefallen und kompliziert ist. Meiner Erfahrung nach verbirgt sich der Fehler jedoch in der Regel im einfacheren, „trivialen“ Code, den man sich nie richtig ansieht, weil er einfach und trivial ist. Überprüfe alles, nicht nur die Stellen, an denen du einen Fehler erwarten würdest.

### Verwende den Debugger
In diesem Buch lernst du, wie du die Ausführung deines Spiels unterbrechen kannst, um den Zustand des Spiels zu untersuchen. Nutze dieses Wissen! Setz Haltepunkte und führe den Code Schritt für Schritt aus. Überprüfe die Werte von Variablen mit der Registerkarte "Beobachten". Verwende die Debug-Konsole, um zu überprüfen, ob die Funktionen die gewünschten Ergebnisse liefern. Teile komplexe Bedingungen oder mathematische Formeln in kleine Teile auf, kopiere diese Teile und führe sie in der Debug-Konsole aus, um zu prüfen, ob die Zahlen zusammenpassen. Überprüfe, ob ein Code-Stück in Ordnung ist, und fahre dann mit der Analyse des nächsten fort. Das Debugging ist besonders hilfreich, um den Code zu identifizieren, der nicht oder zum falschen Zeitpunkt erreicht wird.

## Zen of Python
Ich finde [Zen of Python](https://www.python.org/dev/peps/pep-0020/) als gute Inspiration dafür, wie man Programmieren angehen sollte.
